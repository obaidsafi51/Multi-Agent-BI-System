# Multi-stage build for Next.js frontend - Production optimized
# Stage 1: Build dependencies and application
FROM node:22-alpine AS builder

WORKDIR /app

# Install system dependencies needed for building
RUN apk update && apk add --no-cache \
    libc6-compat \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Copy package files first for better Docker layer caching
COPY package*.json ./

# Install ALL dependencies (including devDependencies for build)
RUN npm ci --only=production=false --prefer-offline --no-audit --progress=false

# Copy source code (this should exclude node_modules, .next via .dockerignore)
COPY . .

# Build the application
RUN npm run build

# Stage 2: Production runtime
FROM node:22-alpine AS runner

WORKDIR /app

# Install only runtime dependencies
RUN apk update && apk add --no-cache \
    curl \
    && rm -rf /var/cache/apk/* \
    && addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production --prefer-offline --no-audit --progress=false \
    && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy other necessary files
COPY --chown=nextjs:nodejs next.config.ts ./
COPY --chown=nextjs:nodejs tsconfig.json ./

# Create .next directory with proper permissions
RUN mkdir -p /app/.next && \
    chown -R nextjs:nodejs /app/.next && \
    chmod 755 /app/.next

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Start production server
CMD ["npm", "start"]
